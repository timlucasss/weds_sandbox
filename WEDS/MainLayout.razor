@using System.Text
@inherits LayoutComponentBase
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Threading.Tasks
@using System.Collections.Generic
@using System.Text.Json
@using System.Xml.Serialization;
@using System.IO;
@using System.Xml;

<header style="padding: 10px; margin: 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); display: flex; align-items: center; justify-content: space-between;">
    <button class="button">← Back to Home</button>
    <h1 style="margin: 0; font-size: 1.5rem;">Patient Search</h1>
    <button class="button">Add New Patient +</button>
</header>

<div style="display: flex; height: calc(100vh - 60px);">
    <aside style="flex: 0 0 auto; width: 250px; padding: 20px; overflow-y: auto;">
        <EditForm Model="this" OnValidSubmit="Search">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="caseNo">Case No</label>
                <InputText id="caseNo" @bind-Value="caseNo" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>
            <div>
                <label for="nhsNumber">NHS Number</label>
                <InputText id="nhsNumber" @bind-Value="nhsNumber" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>
            <div>
                <label for="surname">Surname</label>
                <InputText id="surname" @bind-Value="surname" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>
            <div>
                <label for="forename">Forename</label>
                <InputText id="forename" @bind-Value="forename" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>
            <div>
                <label for="dob">Date of Birth</label>
                <InputDate id="dob" @bind-Value="dob" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>
            <div>
                <label for="sex">Sex</label>
                <select id="sex" @bind="sex" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;">
                    <option value="">Select Sex</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>
            <div>
                <label for="postcode">Postcode</label>
                <InputText id="postcode" @bind-Value="postcode" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>
            <div>
                <label for="letterRefNo">Letter Ref No</label>
                <InputText id="letterRefNo" @bind-Value="letterRefNo" style="width: 100%; margin-bottom: 10px; padding: 10px; box-sizing: border-box;" />
            </div>

            <div style="margin-top: 20px;">
                <button type="submit" class="button" style="width: 100%; margin-bottom: 10px; background-color: #007bff; color: white; border: none; border-radius: 5px; padding: 10px; font-size: 1rem; cursor: pointer;">Search</button>
                <button type="button" class="button" style="width: 100%; background-color: transparent; border: 2px solid #007bff; border-radius: 5px; padding: 10px; font-size: 1rem; color: #007bff; cursor: pointer;" @onclick="ClearFields">Clear</button>
            </div>
        </EditForm>
    </aside>

    <div style="border-left: 1px solid #ccc; height: 100%;"></div>

    <main style="flex-grow: 1; padding: 20px;">
        @Body

        @if (searchResults.Any())
        {

            <h4>@searchResults.Count().ToString() Results Found</h4>
            <div class="search-results">
                <table>
                    <thead>
                        <tr>
                            <th>Case No</th>
                            <th>NHS Number</th>
                            <th>Surname</th>
                            <th>Forename</th>
                            <th>Date of Birth</th>
                            <th>Sex</th>
                            <th>Postcode</th>
                            <th>Address</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                        
                        }
                        @foreach (var patient in searchResults)
                        {
                         
                            <tr>
                                <td>@patient.CaseNo</td>
                                <td>@patient.NhsNumber</td>
                                <td>@patient.Surname</td>
                                <td>@patient.Forename</td>
                                <td>@patient.DateOfBirth?.ToString("yyyy-MM-dd")</td>
                                <td>@patient.Sex</td>
                                <td>@patient.Postcode</td>
                                <td>@patient.Address</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="margin-top: 20px; color: red;">
                <h4>Error:</h4>
                <pre>@errorMessage</pre>
            </div>
        }
    </main>
</div>

@code {
    public class Patient
    {
        public string CaseNo { get; set; }
        public string NhsNumber { get; set; }
        public string Surname { get; set; }
        public string Forename { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public string Sex { get; set; }
        public string Postcode { get; set; }
        public string Address { get; set; }
    }


    private string caseNo;
    private string nhsNumber;
    private string surname;
    private string forename;
    private DateTime? dob;
    private string sex;
    private string postcode;
    private string letterRefNo;
    private List<Patient> searchResults = new List<Patient>();
    private string errorMessage = string.Empty;

    private async Task Search()
    {
        var requestData = new { NhsNumber = nhsNumber };
        var json = JsonSerializer.Serialize(requestData);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync("http://localhost:5175/api/patientdemographics", content);

        if (response.IsSuccessStatusCode)
        {
            var xmlResponse = await response.Content.ReadAsStringAsync();
            xmlResponse = xmlResponse.Trim('"').Replace("\\\"", "\"");

            PrintAllLongNames(xmlResponse);

            try
            {
                List<Patient> patients = ParseXmlResponse(xmlResponse);
                searchResults = patients;
                errorMessage = null;
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to parse XML response: {ex.Message}\n\nXML Response:\n{xmlResponse}";
                searchResults.Clear();
            }
        }
        else
        {
            errorMessage = $"Error fetching data: {response.ReasonPhrase}";
            searchResults.Clear();
        }
    }

    private void PrintAllLongNames(string xmlResponse)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.LoadXml(xmlResponse);

        PrintAllNodes(xmlDoc.DocumentElement, 0);
    }

    private void PrintAllNodes(XmlNode node, int indentLevel)
    {
        Console.WriteLine($"{new string(' ', indentLevel * 2)}<{node.Name}>: {node.InnerText}");

        foreach (XmlNode childNode in node.ChildNodes)
        {
            PrintAllNodes(childNode, indentLevel + 1);
        }
    }

    private List<Patient> ParseXmlResponse(string xmlResponse)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.LoadXml(xmlResponse);

        List<Patient> patients = new List<Patient>();
        XmlNamespaceManager nsmgr = new XmlNamespaceManager(xmlDoc.NameTable);
        nsmgr.AddNamespace("soap", "http://schemas.xmlsoap.org/soap/envelope/");
        nsmgr.AddNamespace("urn", "urn:hl7-org:v2xml");

        var rspNode = xmlDoc.SelectSingleNode("//urn:RSP_K21", nsmgr);
        if (rspNode != null)
        {
            XmlNodeList pidNodes = rspNode.SelectNodes(".//urn:PID", nsmgr);
            foreach (XmlNode pidNode in pidNodes)
            {
                Patient patient = new Patient
                    {
                        CaseNo = pidNode.SelectSingleNode(".//urn:PID.1", nsmgr)?.InnerText,
                        NhsNumber = pidNode.SelectSingleNode(".//urn:PID.3/urn:CX.1", nsmgr)?.InnerText,
                        Surname = pidNode.SelectSingleNode(".//urn:PID.5/urn:XPN.1", nsmgr)?.InnerText,
                        Forename = pidNode.SelectSingleNode(".//urn:PID.5/urn:XPN.2", nsmgr)?.InnerText,
                        DateOfBirth = DateTime.TryParse(pidNode.SelectSingleNode(".//urn:PID.7/urn:TS", nsmgr)?.InnerText, out var dob) ? dob : (DateTime?)null,
                        Sex = pidNode.SelectSingleNode(".//urn:PID.8", nsmgr)?.InnerText,
                        Postcode = pidNode.SelectSingleNode(".//urn:PID.11/urn:XAD.5", nsmgr)?.InnerText,
                        Address = pidNode.SelectSingleNode(".//urn:PID.11", nsmgr)?.InnerText
                    };

                patients.Add(patient);
            }
        }
        return patients;
    }

    private void ClearFields()
    {
        caseNo = string.Empty;
        nhsNumber = string.Empty;
        surname = string.Empty;
        forename = string.Empty;
        dob = null;
        sex = string.Empty;
        postcode = string.Empty;
        letterRefNo = string.Empty;
        searchResults.Clear();
        errorMessage = string.Empty;
    }
}
